{
  "version": 3,
  "sources": ["../../src/esbuildPlugin/include.ts", "../../src/esbuildPlugin/tojs.ts", "../../src/esbuildPlugin/index.ts"],
  "sourcesContent": ["import { readFileSync } from \"node:fs\";\nimport { basename, dirname, resolve } from \"node:path\";\nimport { parse } from \"../compiler\";\nimport * as AST from \"../compiler/ast\";\nimport { ErrorNote, LocationTrace, ParseError } from \"../compiler/errors\";\nimport { isinstance, str } from \"../utils\";\n\nexport class IncludePlaceholder extends AST.Leaf {\n    constructor(loc: LocationTrace, public varname: string) { super(loc); }\n}\nexport async function processIncludes(entrypoint: string, outSourceFileMap: Record<string, string>): Promise<[string[], Record<string, AST.Node>]> {\n    const includeOrder: string[] = [];\n    const includeCounter = { value: 0 };\n    const filemap = {};\n    const seenFiles = new Set<string>();\n    await doInclude(entrypoint, filemap, outSourceFileMap, includeCounter, includeOrder, seenFiles, []);\n    return [includeOrder, filemap];\n}\n\nasync function doInclude(filename: string, filemap: Record<string, AST.Node>, sourceMap: Record<string, string>, includeCounter: { value: number }, includeOrder: string[], seenFiles: Set<string>, includeStack: AST.Value[]) {\n    const currentFileNameVar = \"_\" + basename(filename).replace(/\\W/g, \"\").toLowerCase() + \"_\" + includeCounter.value++;\n    const walk = async (ast: AST.Node): Promise<AST.Node> => {\n        if (\n            !isinstance(ast, AST.AnnotatedValue) ||\n            !isinstance(ast.value, AST.Value) ||\n            typeof ast.value.value !== \"string\" ||\n            ast.attributes.length !== 1 ||\n            !isinstance(ast.attributes[0], AST.Name) ||\n            ast.attributes[0]!.name !== \"include\"\n        ) return ast.pipe(walk);\n        const f = resolve(dirname(filename), ast.value.value);\n        if (seenFiles.has(f)) {\n            throw new ParseError(\"circular import\", ast.value.loc, includeStack.map(v => new ErrorNote(\"note: included from here:\", v.loc)));\n        }\n        try {\n            await doInclude(f, filemap, sourceMap, includeCounter, includeOrder, seenFiles, [...includeStack, ast.value]);\n        } catch (e: any) {\n            if (e.code === \"ENOENT\") {\n                throw new ParseError(\"no such file \" + str(f), ast.value.loc, includeStack.map(v => new ErrorNote(\"note: included from here:\", v.loc)));\n            }\n            throw e;\n        }\n        return new IncludePlaceholder(ast.loc, currentFileNameVar);\n    }\n    seenFiles.add(filename);\n    includeOrder.unshift(currentFileNameVar);\n    filemap[currentFileNameVar] = await walk(await parseFile(filename, sourceMap));\n}\n\nasync function parseFile(filename: string, filemap: Record<string, string>): Promise<AST.Node> {\n    return await parse(filemap[basename(filename)] = readFileSync(filename, \"utf8\"), basename(filename));\n}\n", "import { readFileSync } from \"node:fs\";\nimport { basename } from \"node:path\";\nimport { parse } from \"../compiler\";\nimport * as AST from \"../compiler/ast\";\nimport { LocationTrace, ParseError } from \"../compiler/errors\";\nimport { isinstance, str } from \"../utils\";\nimport { IncludePlaceholder, processIncludes } from \"./include\";\n\nconst internedStrings = new Map<string, string>();\nvar internStringCounter = 0;\nexport function internString(s: string): string {\n    if (!internedStrings.has(s)) {\n        internedStrings.set(s, \"_str\" + (internStringCounter++) + s.toLowerCase().replaceAll(/\\W/g, \"\"));\n    }\n    return internedStrings.get(s)!;\n}\n\nfunction getInternedStrings(): string {\n    return `const ${indent([...internedStrings].map(([val, name]) => `\\n${name} = ${str(val)}`).join(\", \"))};`;\n}\n\nfunction indent(string: string): string {\n    return string ? string.split(\"\\n\").map(l => \"    \" + l).join(\"\\n\") : \"\";\n}\n\nconst neededNames = new Set<string>();\nfunction code(name: string, o: AST.Node, ...args: string[]): string {\n    neededNames.add(name);\n    return `new ${name}(${location(o.loc)}${args.length > 0 ? \",\\n\" : \"\"}${indent(args.join(\",\\n\"))})`;\n}\n\nfunction location(t: LocationTrace): string {\n    return `new LocationTrace(${t.line}, ${t.col}, ${internString(t.file)})`;\n}\n\nfunction liststr(args: string[]): string {\n    return `[${args.length > 0 ? \"\\n\" : \"\"}${indent(args.join(\",\\n\"))}]`;\n}\n\nfunction list(args: AST.Node[]): string {\n    return liststr(args.map(toJS));\n}\n\nfunction prim(arg: string | number | boolean): string {\n    if (typeof arg === \"string\") return internString(arg);\n    return str(arg);\n}\n\nfunction toJS(ast: AST.Node): string {\n    if (isinstance(ast, AST.AnnotatedValue))\n        return ast.value ? code(\"AnnotatedValue\", ast, list(ast.attributes), toJS(ast.value)) : code(\"AnnotatedValue\", ast, list(ast.attributes));\n    if (isinstance(ast, AST.Value))\n        return code(\"Value\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Symbol))\n        return code(\"Symbol\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Name))\n        return code(\"Name\", ast, prim(ast.name));\n    if (isinstance(ast, AST.Assignment))\n        return code(\"Assignment\", ast, toJS(ast.target), toJS(ast.value));\n    if (isinstance(ast, AST.Call))\n        return code(\"Call\", ast, prim(ast.name), list(ast.args));\n    if (isinstance(ast, AST.List))\n        return code(\"List\", ast, list(ast.values));\n    if (isinstance(ast, AST.Definition))\n        return code(\"Definition\", ast, prim(ast.name), prim(ast.outMacro), list(ast.parameters), toJS(ast.body));\n    if (isinstance(ast, AST.Template))\n        return code(\"Template\", ast, toJS(ast.result));\n    if (isinstance(ast, AST.InterpolatedValue))\n        return code(\"InterpolatedValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.SplatValue))\n        return code(\"SplatValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.PipePlaceholder))\n        return code(\"PipePlaceholder\", ast);\n    if (isinstance(ast, AST.BinaryOp))\n        return code(\"BinaryOp\", ast, prim(ast.op), toJS(ast.left), toJS(ast.right), ...(ast.assign ? [prim(ast.noLift), location(ast.assign)] : []));\n    if (isinstance(ast, AST.UnaryOp))\n        return code(\"UnaryOp\", ast, prim(ast.op), toJS(ast.value));\n    if (isinstance(ast, AST.Conditional))\n        return code(\"Conditional\", ast, toJS(ast.cond), toJS(ast.caseTrue), toJS(ast.caseFalse));\n    if (isinstance(ast, AST.DefaultPlaceholder))\n        return code(\"DefaultPlaceholder\", ast);\n    if (isinstance(ast, AST.KeywordArgument))\n        return code(\"KeywordArgument\", ast, prim(ast.name), toJS(ast.arg));\n    if (isinstance(ast, AST.Block))\n        return code(\"Block\", ast, list(ast.body));\n    if (isinstance(ast, AST.ParameterDescriptor))\n        return code(\"ParameterDescriptor\", ast, prim(ast.name), toJS(ast.enumOptions), toJS(ast.defaultValue), prim(ast.lazy));\n    if (isinstance(ast, AST.Mapping))\n        return code(\"Mapping\", ast, liststr(ast.mapping.map(({ key, val }) => `{ key: ${toJS(key)}, val: ${toJS(val)} }`)));\n    if (isinstance(ast, IncludePlaceholder))\n        return ast.varname;\n    throw \"unreachable\";\n}\n\nexport async function toJSFile(filename: string): Promise<string> {\n    var includeOrder: string[], modules: Record<string, AST.Node>;\n    const files: Record<string, string> = {};\n    try {\n        [includeOrder, modules] = await processIncludes(filename, files);\n    } catch (e) {\n        if (!isinstance(e, ParseError)) throw e;\n        console.error(e.displayOn(files));\n        throw e;\n    }\n    internStringCounter = 0;\n    internedStrings.clear();\n    neededNames.clear();\n    neededNames.add(\"LocationTrace\");\n    const js = includeOrder.map(m => `const ${m} = ${toJS(modules[m]!)}`).join(\"\\n\\n\");\n    return `import { ${[...neededNames.values()].join(\", \")} } from \"syd\";\n\nexport const sources = /* @__PURE__ */ {\n    ${Object.entries(files).map(([name, source]) => str(name) + \":\\n\" + indent(str(source.split(\"\\n\"), null, 4))).join(\",\\n    \")}\n};\n\n${getInternedStrings()}\n\n${js}\n\nexport const ast = ${includeOrder.at(-1)};\n\nexport default ast;\n`;\n}\n", "import type { PluginBuild } from \"esbuild\";\nimport { toJSFile } from \"./tojs\";\n\nexport function sydPlugin() {\n    return {\n        name: \"syd\",\n        setup(build: PluginBuild) {\n            // Load \".syd\" files and return an AST as JS expression\n            build.onLoad({ filter: /\\.syd$/ }, async args => {\n                return {\n                    contents: await toJSFile(args.path),\n                    loader: \"js\",\n                }\n            });\n        },\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
