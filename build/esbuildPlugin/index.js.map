{
  "version": 3,
  "sources": ["../../src/esbuildPlugin/index.ts", "../../src/esbuildPlugin/tojs.ts"],
  "sourcesContent": ["import type { PluginBuild } from \"esbuild\";\nimport { basename, dirname } from \"node:path\";\nimport { toJSFile } from \"./tojs\";\n\nexport function sydPlugin() {\n    return {\n        name: \"syd\",\n        setup(build: PluginBuild) {\n            // Load \".syd\" files and return an AST as JS expression\n            build.onLoad({ filter: /\\.syd$/ }, async args => {\n                return {\n                    contents: await toJSFile(args.path, basename(args.path)),\n                    loader: \"js\",\n                }\n            });\n        },\n    }\n}\n", "import { readFileSync } from \"node:fs\";\nimport { parse } from \"../compiler\";\nimport * as AST from \"../compiler/ast\";\nimport { LocationTrace, ParseError } from \"../compiler/errors\";\nimport { isinstance, str } from \"../utils\";\n\nconst internedStrings = new Map<string, string>();\nvar internStringCounter = 0;\nfunction internString(s: string): string {\n    if (!internedStrings.has(s)) {\n        internedStrings.set(s, \"_str\" + (internStringCounter++) + s.toLowerCase().replaceAll(/[^\\w]/g, \"\"));\n    }\n    return internedStrings.get(s)!;\n}\n\nfunction getInternedStrings(): string {\n    return `const ${indent([...internedStrings].map(([val, name]) => `\\n${name} = ${str(val)}`).join(\", \"))};`;\n}\n\nfunction indent(string: string): string {\n    return string ? string.split(\"\\n\").map(l => \"    \" + l).join(\"\\n\") : \"\";\n}\n\nconst neededNames = new Set<string>();\nfunction code(name: string, o: AST.Node, ...args: string[]): string {\n    neededNames.add(name);\n    return `new ${name}(${location(o.loc)}${args.length > 0 ? \",\\n\" : \"\"}${indent(args.join(\",\\n\"))})`;\n}\n\nfunction location(t: LocationTrace): string {\n    return `new LocationTrace(${t.line}, ${t.col}, ${internString(t.file)})`;\n}\n\nfunction liststr(args: string[]): string {\n    return `[${args.length > 0 ? \"\\n\" : \"\"}${indent(args.join(\",\\n\"))}]`;\n}\n\nfunction list(args: AST.Node[]): string {\n    return liststr(args.map(toJS));\n}\n\nfunction prim(arg: string | number | boolean): string {\n    if (typeof arg === \"string\") return internString(arg);\n    return str(arg);\n}\n\nfunction toJS(ast: AST.Node): string {\n    if (isinstance(ast, AST.AnnotatedValue))\n        return ast.value ? code(\"AnnotatedValue\", ast, list(ast.attributes), toJS(ast.value)) : code(\"AnnotatedValue\", ast, list(ast.attributes));\n    if (isinstance(ast, AST.Value))\n        return code(\"Value\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Symbol))\n        return code(\"Symbol\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Name))\n        return code(\"Name\", ast, prim(ast.name));\n    if (isinstance(ast, AST.Assignment))\n        return code(\"Assignment\", ast, toJS(ast.target), toJS(ast.value));\n    if (isinstance(ast, AST.Call))\n        return code(\"Call\", ast, prim(ast.name), list(ast.args));\n    if (isinstance(ast, AST.List))\n        return code(\"List\", ast, list(ast.values));\n    if (isinstance(ast, AST.Definition))\n        return code(\"Definition\", ast, prim(ast.name), prim(ast.outMacro), list(ast.parameters), toJS(ast.body));\n    if (isinstance(ast, AST.Template))\n        return code(\"Template\", ast, toJS(ast.result));\n    if (isinstance(ast, AST.InterpolatedValue))\n        return code(\"InterpolatedValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.SplatValue))\n        return code(\"SplatValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.PipePlaceholder))\n        return code(\"PipePlaceholder\", ast);\n    if (isinstance(ast, AST.BinaryOp))\n        return code(\"BinaryOp\", ast, prim(ast.op), toJS(ast.left), toJS(ast.right), ...(ast.assign ? [prim(ast.noLift), location(ast.assign)] : []));\n    if (isinstance(ast, AST.UnaryOp))\n        return code(\"UnaryOp\", ast, prim(ast.op), toJS(ast.value));\n    if (isinstance(ast, AST.Conditional))\n        return code(\"Conditional\", ast, toJS(ast.cond), toJS(ast.caseTrue), toJS(ast.caseFalse));\n    if (isinstance(ast, AST.DefaultPlaceholder))\n        return code(\"DefaultPlaceholder\", ast);\n    if (isinstance(ast, AST.KeywordArgument))\n        return code(\"KeywordArgument\", ast, prim(ast.name), toJS(ast.arg));\n    if (isinstance(ast, AST.Block))\n        return code(\"Block\", ast, list(ast.body));\n    if (isinstance(ast, AST.ParameterDescriptor))\n        return code(\"ParameterDescriptor\", ast, prim(ast.name), toJS(ast.enumOptions), toJS(ast.defaultValue), prim(ast.lazy));\n    if (isinstance(ast, AST.Mapping))\n        return code(\"Mapping\", ast, liststr(ast.mapping.map(({ key, val }) => `{ key: ${toJS(key)}, val: ${toJS(val)} }`)));\n    throw \"unreachable\";\n}\n\nexport async function toJSFile(filename: string, displayFilename: string): Promise<string> {\n    const input = readFileSync(filename, \"utf8\");\n    const files = { [displayFilename]: input };\n    var ast: AST.Node;\n\n    try {\n        ast = await parse(input, displayFilename);\n    } catch (e) {\n        if (!isinstance(e, ParseError)) throw e;\n        console.error(e.displayOn(files));\n        throw e;\n    }\n    internStringCounter = 0;\n    internedStrings.clear();\n    neededNames.clear();\n    const js = toJS(ast);\n    neededNames.add(\"LocationTrace\");\n    return `import { ${[...neededNames.values()].join(\", \")} } from \"syd\";\n\nexport const source = /* @__PURE__ */ ${str(input.split(\"\\n\"), null, 4)}.join(\"\\\\n\");\n\n${getInternedStrings()}\n\nexport const ast = ${js};\n\nexport default ast;\n`;\n}\n"],
  "mappings": "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",
  "names": []
}
