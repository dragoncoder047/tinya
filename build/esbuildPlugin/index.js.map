{
  "version": 3,
  "sources": ["../../src/esbuildPlugin/index.ts", "../../src/esbuildPlugin/tojs.ts"],
  "sourcesContent": ["import type { PluginBuild } from \"esbuild\";\nimport { basename, dirname } from \"node:path\";\nimport { toJSFile } from \"./tojs\";\n\nexport function sydPlugin() {\n    return {\n        name: \"syd\",\n        setup(build: PluginBuild) {\n            // Load \".syd\" files and return an AST as JS expression\n            build.onLoad({ filter: /\\.syd$/ }, async args => {\n                return {\n                    contents: await toJSFile(args.path, basename(args.path)),\n                    loader: \"js\",\n                }\n            });\n        },\n    }\n}\n", "import { readFileSync } from \"node:fs\";\nimport { join } from \"node:path\";\nimport { parse } from \"../compiler\";\nimport { AST } from \"../compiler/ast\";\nimport { LocationTrace, ParseError } from \"../compiler/errors\";\nimport { isinstance, str } from \"../utils\";\n\nconst internedStrings = new Map<string, string>();\nvar internStringCounter = 0;\nfunction internString(s: string): string {\n    if (!internedStrings.has(s)) {\n        internedStrings.set(s, \"_str\" + (internStringCounter++) + s.toLowerCase().replaceAll(/[^\\w]/g, \"\"));\n    }\n    return internedStrings.get(s)!;\n}\n\nfunction getInternedStrings(): string {\n    return `const ${indent([...internedStrings].map(([val, name]) => `\\n${name} = ${str(val)}`).join(\", \"))};`;\n}\n\nfunction indent(string: string): string {\n    return string ? string.split(\"\\n\").map(l => \"    \" + l).join(\"\\n\") : \"\";\n}\n\nfunction code(name: string, o: AST.Node, ...args: string[]): string {\n    return `new AST.${name}(${location(o.loc)}${args.length > 0 ? \",\\n\" : \"\"}${indent(args.join(\",\\n\"))})`;\n}\n\nfunction location(t: LocationTrace): string {\n    return `new LocationTrace(${t.line}, ${t.col}, ${internString(t.file)})`;\n}\n\nfunction liststr(args: string[]): string {\n    return `[${args.length > 0 ? \"\\n\" : \"\"}${indent(args.join(\",\\n\"))}]`;\n}\n\nfunction list(args: AST.Node[]): string {\n    return liststr(args.map(toJS));\n}\n\nfunction prim(arg: string | number | boolean): string {\n    if (typeof arg === \"string\") return internString(arg);\n    return str(arg);\n}\n\nfunction toJS(ast: AST.Node): string {\n    if (isinstance(ast, AST.AnnotatedValue))\n        return ast.value ? code(\"AnnotatedValue\", ast, list(ast.attributes), toJS(ast.value)) : code(\"AnnotatedValue\", ast, list(ast.attributes));\n    if (isinstance(ast, AST.Value))\n        return code(\"Value\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Symbol))\n        return code(\"Symbol\", ast, prim(ast.value));\n    if (isinstance(ast, AST.Name))\n        return code(\"Name\", ast, prim(ast.name));\n    if (isinstance(ast, AST.Assignment))\n        return code(\"Assignment\", ast, toJS(ast.target), toJS(ast.value));\n    if (isinstance(ast, AST.Call))\n        return code(\"Call\", ast, prim(ast.name), list(ast.args));\n    if (isinstance(ast, AST.List))\n        return code(\"List\", ast, list(ast.values));\n    if (isinstance(ast, AST.Definition))\n        return code(\"Definition\", ast, prim(ast.name), prim(ast.outMacro), list(ast.parameters), toJS(ast.body));\n    if (isinstance(ast, AST.Template))\n        return code(\"Template\", ast, toJS(ast.result));\n    if (isinstance(ast, AST.InterpolatedValue))\n        return code(\"InterpolatedValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.SplatValue))\n        return code(\"SplatValue\", ast, toJS(ast.value));\n    if (isinstance(ast, AST.PipePlaceholder))\n        return code(\"PipePlaceholder\", ast);\n    if (isinstance(ast, AST.BinaryOp))\n        return code(\"BinaryOp\", ast, prim(ast.op), toJS(ast.left), toJS(ast.right), ...(ast.assign ? [prim(ast.noLift), location(ast.assign)] : []));\n    if (isinstance(ast, AST.UnaryOp))\n        return code(\"UnaryOp\", ast, prim(ast.op), toJS(ast.value));\n    if (isinstance(ast, AST.Conditional))\n        return code(\"Conditional\", ast, toJS(ast.cond), toJS(ast.caseTrue), toJS(ast.caseFalse));\n    if (isinstance(ast, AST.DefaultPlaceholder))\n        return code(\"DefaultPlaceholder\", ast);\n    if (isinstance(ast, AST.KeywordArgument))\n        return code(\"KeywordArgument\", ast, prim(ast.name), toJS(ast.arg));\n    if (isinstance(ast, AST.Block))\n        return code(\"Block\", ast, list(ast.body));\n    if (isinstance(ast, AST.ParameterDescriptor))\n        return code(\"ParameterDescriptor\", ast, prim(ast.name), toJS(ast.enumOptions), toJS(ast.defaultValue), prim(ast.lazy));\n    if (isinstance(ast, AST.Mapping))\n        return code(\"Mapping\", ast, liststr(ast.mapping.map(({ key, val }) => `{ key: ${toJS(key)}, val: ${toJS(val)} }`)));\n    throw \"unreachable\";\n}\n\nexport async function toJSFile(filename: string, displayFilename: string): Promise<string> {\n    const input = readFileSync(filename, \"utf8\");\n    const files = { [displayFilename]: input };\n    var ast: AST.Node;\n\n    try {\n        ast = await parse(input, displayFilename);\n    } catch (e) {\n        if (!isinstance(e, ParseError)) throw e;\n        process.stderr.write(e.displayOn(files));\n        process.exit(1);\n    }\n    internStringCounter = 0;\n    internedStrings.clear();\n    const js = toJS(ast);\n    return `import { AST, LocationTrace } from \"syd\";\n\nexport const source = /* @__PURE__ */ ${str(input.split(\"\\n\"), null, 4)}.join(\"\\\\n\");\n\n${getInternedStrings()}\n\nexport const ast = ${js};\n\nexport default ast;\n`;\n}\n"],
  "mappings": "8GACA,OAAS,YAAAA,MAAyB,YCDlC,OAAS,gBAAAC,MAAoB,UAO7B,IAAMC,EAAkB,IAAI,IACxBC,EAAsB,EAC1B,SAASC,EAAaC,EAAmB,CACrC,OAAKH,EAAgB,IAAIG,CAAC,GACtBH,EAAgB,IAAIG,EAAG,OAAUF,IAAyBE,EAAE,YAAY,EAAE,WAAW,SAAU,EAAE,CAAC,EAE/FH,EAAgB,IAAIG,CAAC,CAChC,CALSC,EAAAF,EAAA,gBAOT,SAASG,GAA6B,CAClC,MAAO,SAASC,EAAO,CAAC,GAAGN,CAAe,EAAE,IAAI,CAAC,CAACO,EAAKC,CAAI,IAAM;AAAA,EAAKA,CAAI,MAAMC,EAAIF,CAAG,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,GAC3G,CAFSH,EAAAC,EAAA,sBAIT,SAASC,EAAOI,EAAwB,CACpC,OAAOA,EAASA,EAAO,MAAM;AAAA,CAAI,EAAE,IAAIC,GAAK,OAASA,CAAC,EAAE,KAAK;AAAA,CAAI,EAAI,EACzE,CAFSP,EAAAE,EAAA,UAIT,SAASM,EAAKJ,EAAcK,KAAgBC,EAAwB,CAChE,MAAO,WAAWN,CAAI,IAAIO,EAASF,EAAE,GAAG,CAAC,GAAGC,EAAK,OAAS,EAAI;AAAA,EAAQ,EAAE,GAAGR,EAAOQ,EAAK,KAAK;AAAA,CAAK,CAAC,CAAC,GACvG,CAFSV,EAAAQ,EAAA,QAIT,SAASG,EAASC,EAA0B,CACxC,MAAO,qBAAqBA,EAAE,IAAI,KAAKA,EAAE,GAAG,KAAKd,EAAac,EAAE,IAAI,CAAC,GACzE,CAFSZ,EAAAW,EAAA,YAIT,SAASE,EAAQH,EAAwB,CACrC,MAAO,IAAIA,EAAK,OAAS,EAAI;AAAA,EAAO,EAAE,GAAGR,EAAOQ,EAAK,KAAK;AAAA,CAAK,CAAC,CAAC,GACrE,CAFSV,EAAAa,EAAA,WAIT,SAASC,EAAKJ,EAA0B,CACpC,OAAOG,EAAQH,EAAK,IAAIK,CAAI,CAAC,CACjC,CAFSf,EAAAc,EAAA,QAIT,SAASE,EAAKC,EAAwC,CAClD,OAAI,OAAOA,GAAQ,SAAiBnB,EAAamB,CAAG,EAC7CZ,EAAIY,CAAG,CAClB,CAHSjB,EAAAgB,EAAA,QAKT,SAASD,EAAKG,EAAuB,CACjC,GAAIC,EAAWD,EAAKE,EAAI,cAAc,EAClC,OAAOF,EAAI,MAAQV,EAAK,iBAAkBU,EAAKJ,EAAKI,EAAI,UAAU,EAAGH,EAAKG,EAAI,KAAK,CAAC,EAAIV,EAAK,iBAAkBU,EAAKJ,EAAKI,EAAI,UAAU,CAAC,EAC5I,GAAIC,EAAWD,EAAKE,EAAI,KAAK,EACzB,OAAOZ,EAAK,QAASU,EAAKF,EAAKE,EAAI,KAAK,CAAC,EAC7C,GAAIC,EAAWD,EAAKE,EAAI,MAAM,EAC1B,OAAOZ,EAAK,SAAUU,EAAKF,EAAKE,EAAI,KAAK,CAAC,EAC9C,GAAIC,EAAWD,EAAKE,EAAI,IAAI,EACxB,OAAOZ,EAAK,OAAQU,EAAKF,EAAKE,EAAI,IAAI,CAAC,EAC3C,GAAIC,EAAWD,EAAKE,EAAI,UAAU,EAC9B,OAAOZ,EAAK,aAAcU,EAAKH,EAAKG,EAAI,MAAM,EAAGH,EAAKG,EAAI,KAAK,CAAC,EACpE,GAAIC,EAAWD,EAAKE,EAAI,IAAI,EACxB,OAAOZ,EAAK,OAAQU,EAAKF,EAAKE,EAAI,IAAI,EAAGJ,EAAKI,EAAI,IAAI,CAAC,EAC3D,GAAIC,EAAWD,EAAKE,EAAI,IAAI,EACxB,OAAOZ,EAAK,OAAQU,EAAKJ,EAAKI,EAAI,MAAM,CAAC,EAC7C,GAAIC,EAAWD,EAAKE,EAAI,UAAU,EAC9B,OAAOZ,EAAK,aAAcU,EAAKF,EAAKE,EAAI,IAAI,EAAGF,EAAKE,EAAI,QAAQ,EAAGJ,EAAKI,EAAI,UAAU,EAAGH,EAAKG,EAAI,IAAI,CAAC,EAC3G,GAAIC,EAAWD,EAAKE,EAAI,QAAQ,EAC5B,OAAOZ,EAAK,WAAYU,EAAKH,EAAKG,EAAI,MAAM,CAAC,EACjD,GAAIC,EAAWD,EAAKE,EAAI,iBAAiB,EACrC,OAAOZ,EAAK,oBAAqBU,EAAKH,EAAKG,EAAI,KAAK,CAAC,EACzD,GAAIC,EAAWD,EAAKE,EAAI,UAAU,EAC9B,OAAOZ,EAAK,aAAcU,EAAKH,EAAKG,EAAI,KAAK,CAAC,EAClD,GAAIC,EAAWD,EAAKE,EAAI,eAAe,EACnC,OAAOZ,EAAK,kBAAmBU,CAAG,EACtC,GAAIC,EAAWD,EAAKE,EAAI,QAAQ,EAC5B,OAAOZ,EAAK,WAAYU,EAAKF,EAAKE,EAAI,EAAE,EAAGH,EAAKG,EAAI,IAAI,EAAGH,EAAKG,EAAI,KAAK,EAAG,GAAIA,EAAI,OAAS,CAACF,EAAKE,EAAI,MAAM,EAAGP,EAASO,EAAI,MAAM,CAAC,EAAI,CAAC,CAAE,EAC/I,GAAIC,EAAWD,EAAKE,EAAI,OAAO,EAC3B,OAAOZ,EAAK,UAAWU,EAAKF,EAAKE,EAAI,EAAE,EAAGH,EAAKG,EAAI,KAAK,CAAC,EAC7D,GAAIC,EAAWD,EAAKE,EAAI,WAAW,EAC/B,OAAOZ,EAAK,cAAeU,EAAKH,EAAKG,EAAI,IAAI,EAAGH,EAAKG,EAAI,QAAQ,EAAGH,EAAKG,EAAI,SAAS,CAAC,EAC3F,GAAIC,EAAWD,EAAKE,EAAI,kBAAkB,EACtC,OAAOZ,EAAK,qBAAsBU,CAAG,EACzC,GAAIC,EAAWD,EAAKE,EAAI,eAAe,EACnC,OAAOZ,EAAK,kBAAmBU,EAAKF,EAAKE,EAAI,IAAI,EAAGH,EAAKG,EAAI,GAAG,CAAC,EACrE,GAAIC,EAAWD,EAAKE,EAAI,KAAK,EACzB,OAAOZ,EAAK,QAASU,EAAKJ,EAAKI,EAAI,IAAI,CAAC,EAC5C,GAAIC,EAAWD,EAAKE,EAAI,mBAAmB,EACvC,OAAOZ,EAAK,sBAAuBU,EAAKF,EAAKE,EAAI,IAAI,EAAGH,EAAKG,EAAI,WAAW,EAAGH,EAAKG,EAAI,YAAY,EAAGF,EAAKE,EAAI,IAAI,CAAC,EACzH,GAAIC,EAAWD,EAAKE,EAAI,OAAO,EAC3B,OAAOZ,EAAK,UAAWU,EAAKL,EAAQK,EAAI,QAAQ,IAAI,CAAC,CAAE,IAAAG,EAAK,IAAAlB,CAAI,IAAM,UAAUY,EAAKM,CAAG,CAAC,UAAUN,EAAKZ,CAAG,CAAC,IAAI,CAAC,CAAC,EACtH,KAAM,aACV,CA1CSH,EAAAe,EAAA,QA4CT,eAAsBO,EAASC,EAAkBC,EAA0C,CACvF,IAAMC,EAAQC,EAAaH,EAAU,MAAM,EACrCI,EAAQ,CAAE,CAACH,CAAe,EAAGC,CAAM,EACzC,IAAIP,EAEJ,GAAI,CACAA,EAAM,MAAMU,EAAMH,EAAOD,CAAe,CAC5C,OAASK,EAAG,CACR,GAAI,CAACV,EAAWU,EAAGC,CAAU,EAAG,MAAMD,EACtC,QAAQ,OAAO,MAAMA,EAAE,UAAUF,CAAK,CAAC,EACvC,QAAQ,KAAK,CAAC,CAClB,CACA9B,EAAsB,EACtBD,EAAgB,MAAM,EACtB,IAAMmC,EAAKhB,EAAKG,CAAG,EACnB,MAAO;AAAA;AAAA,wCAE6Bb,EAAIoB,EAAM,MAAM;AAAA,CAAI,EAAG,KAAM,CAAC,CAAC;AAAA;AAAA,EAErExB,EAAmB,CAAC;AAAA;AAAA,qBAED8B,CAAE;AAAA;AAAA;AAAA,CAIvB,CAzBsB/B,EAAAsB,EAAA,YDrFf,SAASU,GAAY,CACxB,MAAO,CACH,KAAM,MACN,MAAMC,EAAoB,CAEtBA,EAAM,OAAO,CAAE,OAAQ,QAAS,EAAG,MAAMC,IAC9B,CACH,SAAU,MAAMC,EAASD,EAAK,KAAME,EAASF,EAAK,IAAI,CAAC,EACvD,OAAQ,IACZ,EACH,CACL,CACJ,CACJ,CAbgBG,EAAAL,EAAA",
  "names": ["basename", "readFileSync", "internedStrings", "internStringCounter", "internString", "s", "__name", "getInternedStrings", "indent", "val", "name", "str", "string", "l", "code", "o", "args", "location", "t", "liststr", "list", "toJS", "prim", "arg", "ast", "isinstance", "AST", "key", "toJSFile", "filename", "displayFilename", "input", "readFileSync", "files", "parse", "e", "ParseError", "js", "sydPlugin", "build", "args", "toJSFile", "basename", "__name"]
}
